#!/bin/sh

# An example hook script to verify what is about to be pushed.  Called by "git
# push" after it has checked the remote status, but before anything has been
# pushed.  If this script exits with a non-zero status nothing will be pushed.
#
# This hook is called with the following parameters:
#
# $1 -- Name of the remote to which the push is being done
# $2 -- URL to which the push is being done
#
# If pushing without using a named remote those arguments will be equal.
#
# Information about the commits which are being pushed is supplied as lines to
# the standard input in the form:
#
#   <local ref> <local sha1> <remote ref> <remote sha1>
#
# This sample shows how to prevent push of commits where the log message starts
# with "WIP" (work in progress).

# Based on https://github.com/raven/git-prepush-recipes/blob/master/pre-push.sample

remote="$1"
url="$2"

z40=0000000000000000000000000000000000000000

IFS=' '
while read local_ref local_sha remote_ref remote_sha
do
	if [ "$local_sha" = $z40 ]
	then
		echo "Deleting files, OK."
	else
		if [ "$remote_sha" = $z40 ]
		then
			# New branch, examine all commits
		        range="$local_sha"
		else
			# Update to existing branch, examine new commits
			range="$remote_sha..$local_sha"
		fi
		echo "Checking range: $range" 

		# Check for foo commit
		commit=`git rev-list -n 1 --grep '^foo(bar)?$' "$range"`
		if [ -n "$commit" ]
		then
			echo "ERROR: git pre-push hook found commit message starting with 'foo' in $local_ref"
			echo "Eliminate the bad commit message by either:"
			echo "git commit --amend -m 'New commit message'"
			echo "or by editing the commit message while rebasing the commit."
			echo "--------------\n"
			exit 1
		fi

		# Check for . commit
		#commit=`git rev-list -n 1 --grep '^\.' "$range"`
		#if [ -n "$commit" ]
		#then
		#	echo "ERROR: git pre-push hook found commit message starting with '.' in $local_ref"
		#	echo "Eliminate the bad commit message by either:"
		#	echo "git commit --amend -m 'New commit message'"
		#	echo "or by editing the commit message while rebasing the commit."
		#	echo "--------------\n"
		#	exit 1
		#fi
	fi
done

exit 0
